#!/usr/bin/env node

var builder = require('buildify'),
    request = require('request');

var baseDir = __dirname + '/..',
    outputDir = baseDir + '/lib';

var jsLibs = {
    'jquery.min': 'http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min',
    'jquery.tipsy.min': 'https://cdnjs.cloudflare.com/ajax/libs/jquery.tipsy/1.0.3/jquery.tipsy.min',
    'require.min': 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.2.0/require.min',
    'require-text.min': 'https://cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min',
    'require-i18n.min': 'https://cdnjs.cloudflare.com/ajax/libs/require-i18n/2.0.4/i18n.min',
    'underscore-min': 'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min',
    'backbone-min': 'http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.0/backbone-min',
    'nprogress.min': 'https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min'
};

var cssLibs = {
    'nprogress.css': 'https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.css',
    'normalize.css': 'http://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.0/normalize.css',
    'jquery.tipsy.css': 'http://cdnjs.cloudflare.com/ajax/libs/jquery.tipsy/1.0.3/jquery.tipsy.css'

};

// Fetch libaries
builder.task({
    name: "lib",
    task: function () {
        for (var cssLib in cssLibs) {
            !function fetch(lib) {
                request(cssLibs[lib], function (error, response, body) {
                    if (!error && response.statusCode == 200) {
                        builder('/')
                            .setContent(body)
                            .save(outputDir + "/" + lib);
                    } else {
                        console.error(response && response.statusCode, lib, error);
                    }
                });
            }(cssLib);
        }

        for (var jsLib in jsLibs) {
            !function fetch(lib) {
                request(jsLibs[lib] + ".js", function (error, response, body) {
                    if (!error && response.statusCode == 200) {
                        builder('/')
                            .setContent(body)
                            .save(outputDir + "/" + lib + ".js");
                    } else {
                        console.error(response && response.statusCode, lib, error);
                    }
                });
                request(jsLibs[lib].substr(0, jsLibs[lib].length - 4) + ".js", function (error, response, body) {
                    if (!error && response.statusCode == 200) {
                        builder('/')
                            .setContent(body)
                            .save(outputDir + "/" + lib.substr(0, lib.length - 4) + ".js");
                    } else {
                        console.error(response && response.statusCode, lib, error);
                    }
                });
                request(jsLibs[lib] + ".map", function (error, response, body) {
                    if (!error && response.statusCode == 200) {
                        builder('/')
                            .setContent(body)
                            .save(outputDir + "/" + lib + ".map");
                    }
                });
            }(jsLib);
        }
    }
});